using Microsoft.AspNetCore.Components;
using BlazorApp.Models;
using Syncfusion.Blazor.Notifications;
using System.Text.Json;
using Azure.AI.OpenAI;
using Microsoft.Extensions.AI;

namespace BlazorApp.Components.Pages
{
    public partial class Home
    {
        // Syncfusion Toast object to display notifications
        SfToast ToastObj;

        // The target element for the Toast notification
        private string ToastTarget { get; set; } = "#toast-kanban-observable";

        // The text displayed on the "Generate Tasks" button
        public string ContentGenerateTask { get; set; } = "Generate Tasks";

        // The name of the project for which tasks will be generated
        private string ProjectName { get; set; } = string.Empty;

        // The number of tasks to be generated
        private string TaskCount { get; set; } = string.Empty;

        // Boolean to control the visibility of the project details dialog
        private bool IsProjectDetailsDialogEnabled { get; set; } = false;

        // Indicates whether tasks have been successfully generated
        private bool IsProjectTasksGenerated { get; set; } = false;

        // Boolean to manage visibility of the homepage
        private bool IsHomepage { get; set; } = true;

        // A list to store the task recommendations generated by AI
        private List<SmartSuggestionDataModel> SmartSuggestions { get; set; } = new List<SmartSuggestionDataModel>();

        // Stores any warning text to be displayed for validation errors
        private string WarningText { get; set; }

        // Template for displaying error messages in the Toast notification
        private RenderFragment GetErrorTemplate() => builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddContent(1, "An error occurred during the AI process, Please try again.");
            builder.CloseElement();
        };

        // Triggered when the "Generate Tasks" button is clicked, updates its text to indicate progress
        public void BeginGenerateTasks(Syncfusion.Blazor.SplitButtons.ProgressEventArgs args)
        {
            ContentGenerateTask = "Generating...";
        }

        // Handles the end of the task generation process, resets the UI and closes the dialog
        public async Task EndGenerateTasks(Syncfusion.Blazor.SplitButtons.ProgressEventArgs args)
        {
            while (!IsProjectTasksGenerated)
            {
                await Task.Delay(1000);
                IsHomepage = false;
            }
            ContentGenerateTask = "Generate Tasks";
            CloseDialog();
        }

        // Opens the project details dialog to allow user input for project and task count
        private void OpenProjectDetailsDialog()
        {
            IsProjectDetailsDialogEnabled = true;
        }

        // Initiates the task generation process and sets the state
        private async Task GenerateTasks()
        {
            IsProjectTasksGenerated = false;
            await GenerateProjectTasks();
        }

        // Closes the project details dialog and clears the input fields
        private void CloseDialog()
        {
            IsProjectDetailsDialogEnabled = false;
            TaskCount = string.Empty;
            ProjectName = string.Empty;
            IsProjectTasksGenerated = false;
            StateHasChanged();
        }
        private async Task GenerateProjectTasks()
        {
            try
            {
                if (!string.IsNullOrEmpty(ProjectName) && !string.IsNullOrEmpty(TaskCount))
                {
                    string result = string.Empty;
                    var description = $"Generate {TaskCount} task recommendations for {ProjectName}. Each task should include the following fields: Title, Status, Description, StoryPoints and Color, formatted according to the dataset. Set the Status to 'Open', and use black for the Color. Use the dataset provided below to create your recommendations. IMPORTANT: Return the data strictly in JSON format with all the required fields. Only the JSON data is needed, no additional text.Return only the JSON array format without any explanations.";

                    result = await GetCompletionAsync(description); // Get AI response
                    string data = result.Replace("```json", "").Replace("```", "").Replace("\r", "").Replace("\n", "").Replace("\t", "").Trim();
                    var modifiedData = JsonSerializer.Deserialize<List<SmartSuggestionDataModel>>(data);
                    SmartSuggestions = modifiedData != null ? SmartSuggestions.Concat(modifiedData).ToList() : SmartSuggestions;
                    IsProjectTasksGenerated = true;
                }
                else
                {
                    WarningText = string.IsNullOrEmpty(ProjectName) && string.IsNullOrEmpty(TaskCount)
                        ? "Enter the required task creation details"
                        : !string.IsNullOrEmpty(TaskCount) ? "Enter the Project Details" : "Enter the number of tasks";

                    IsProjectTasksGenerated = true;
                    await ToastObj.ShowAsync(new ToastModel { Content = WarningText, ShowCloseButton = true, Timeout = 3000 });
                }
            }
            catch
            {
                await ToastObj.ShowAsync(new ToastModel { ContentTemplate = @GetErrorTemplate(), ShowCloseButton = true, Timeout = 0 });
            }
        }

        // Sends a request to Azure OpenAI and retrieves the task recommendations
        private async Task<string> GetCompletionAsync(string description)
        {
            // Initialize the Azure OpenAI client with required configurations
            IChatClient client =
                new AzureOpenAIClient(
                    new Uri("Your Endpoint"),
                    new System.ClientModel.ApiKeyCredential("Your Api Key"))
                        .AsChatClient(modelId: "Your Deployment Name");

            // Fetch the AI completion result
            var response = await client.CompleteAsync(description);
            return response.Message.Text;
        }
    }
}

